module Main where

import Election
import Vote
import UserAdmin

import Daml.Script
import DA.Date as Date

setup : Script ()
setup = script do
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  charlie <- allocatePartyWithHint "Charlie" (PartyIdHint "Charlie")
  admin <- allocatePartyWithHint "Broadridge" (PartyIdHint "Broadridge")
  apple <- allocatePartyWithHint "Apple" (PartyIdHint "Apple")
  dtcc <- allocatePartyWithHint "DTCC" (PartyIdHint "DTCC")
  bony <- allocatePartyWithHint "BoNY" (PartyIdHint "BoNY")
  fed <- allocatePartyWithHint "Fed" (PartyIdHint "Fed")
  public <- allocatePartyWithHint "Public" (PartyIdHint "Public")

  now <- getTime

  aliceInvestor <- submit admin do
    createCmd Investor
      with
        admin
        investor = alice

  charlieInvestor <- submit admin do
    createCmd Investor
      with
        admin
        investor = charlie

  bonyCustodian <- submit admin do
    createCmd Custodian
      with
        admin
        custodian = bony
        csd = dtcc
        auditor = fed

  appleIssuer <- submit bony do
    exerciseCmd bonyCustodian GrantIssuerRights
      with
        issuer = apple
        symbol = "AAPL"

  appleVoterRegistryCid <- submit apple do
    exerciseCmd appleIssuer CreateVoterRegistry
      with
        investors = []

  appleVoterRegistryCid <- submit apple do
    exerciseCmd appleVoterRegistryCid AddInvestor
      with
        investor = alice

  appleVoterRegistryCid <- submit apple do
    exerciseCmd appleVoterRegistryCid AddInvestor
      with
        investor = charlie

  aliceVote <- submit apple do
    exerciseCmd appleIssuer IssueVote
      with
        investor = alice
        quantity = 10
        issued = now
        proxy = None

  charlieVote <- submit apple do
    exerciseCmd appleIssuer IssueVote
      with
        investor = charlie
        quantity = 5
        issued = now
        proxy = None
  
  bobProxy <- submit admin do
    createCmd Proxy
      with
        admin
        proxy = bob
        public

  bobAppleProxy <- submit apple do
    exerciseCmd appleIssuer GrantProxyRights
      with
        proxy = bob

  -- Alice transfers vote to proxy Bob
  aliceToBobVoteTransfer <- submit alice do
    exerciseCmd aliceVote Transfer
      with
        newProxy = Some bob

  -- proxy Bob accepts Alice's vote
  aliceBobVote <- submit bob do
    exerciseCmd bobAppleProxy AcceptVoteAsProxy
      with
        transferId = aliceToBobVoteTransfer

  -- Alice decides to remove proxy Bob
  aliceRemoveProxyVote <- submit alice do
    exerciseCmd aliceBobVote RemoveProxy

  -- create Election
  appleVoterRegistry <- queryContractId apple appleVoterRegistryCid
  election <- case appleVoterRegistry of
    Some contract -> submit apple do
      exerciseCmd appleIssuer CreateElection
        with
          date = Date.date 2021 Date.Jul 14
          description = "vote on CEO"
          investors = contract.investors
    None -> abort "couldn't make election"
  
  -- create ballot for Apple shareholders
  aliceBallot <- submit apple do
    exerciseCmd election IssueBallots
      with
        symbol = "AAPL"
        proxy = None

  -- aliceFilledBallot <- submit alice do
  --   exerciseCmd aliceBallot FillBallot
  --     with
  --       vote = True

  return ()
