module Main where

import Daml.Script
import DA.Date as Date
import DA.Foldable (mapA_)
import DA.Set as Set

import Election
import Vote
import UserAdmin


setup : Script ()
setup = script do
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  alpha <- allocatePartyWithHint "Fund Alpha" (PartyIdHint "Fund Alpha")
  charlie <- allocatePartyWithHint "Charlie" (PartyIdHint "Charlie")
  dan <- allocatePartyWithHint "Dan" (PartyIdHint "Dan")
  beta <- allocatePartyWithHint "Fund Beta" (PartyIdHint "Fund Beta")
  gamma <- allocatePartyWithHint "Fund Gamma" (PartyIdHint "Fund Gamma")
  admin <- allocatePartyWithHint "Admin" (PartyIdHint "Admin")
  apple <- allocatePartyWithHint "Apple" (PartyIdHint "Apple")
  microsoft <- allocatePartyWithHint "Microsoft" (PartyIdHint "Microsoft")
  amazon <- allocatePartyWithHint "Amazon" (PartyIdHint "Amazon")
  google <- allocatePartyWithHint "Google" (PartyIdHint "Google")
  facebook <- allocatePartyWithHint "Facebook" (PartyIdHint "Facebook")
  fidelity <- allocatePartyWithHint "Fidelity" (PartyIdHint "Fidelity")
  dtcc <- allocatePartyWithHint "DTCC" (PartyIdHint "DTCC")
  bony <- allocatePartyWithHint "BoNY" (PartyIdHint "BoNY")
  regulator <- allocatePartyWithHint "Regulator" (PartyIdHint "Regulator")
  public <- allocatePartyWithHint "Public" (PartyIdHint "Public")

  now <- getTime
  let
    investors = [alice, charlie, dan]
    issuers = [(apple, "AAPL"), (microsoft, "MSFT"), (amazon, "AMZN"), (google, "GOOG"), (facebook, "FB"), (fidelity, "FFIDX")]

  -- create Investors
  mapA_ (\investor -> submit admin do
    createCmd Investor with ..
    ) (investors)

  -- create Custodian
  bonyCustodian <- submit admin do
    createCmd Custodian
      with
        admin
        custodian = bony
        csd = dtcc
        auditor = regulator

  -- create Issuers
  mapA_ (\(issuer, symbol) -> submit bony do
    exerciseCmd bonyCustodian GrantIssuerRights with ..
    ) issuers

  -- create Registries
  mapA_ (\(issuer, _) -> submit issuer do
    exerciseByKeyCmd @Issuer (bony, issuer) CreateVoterRegistry
      with
        investors = empty
    ) issuers
  mapA_ (\(issuer, _) -> submit issuer do
    exerciseByKeyCmd @Issuer (bony, issuer) CreateProxyRegistry
      with
        proxies = empty
        public
    ) issuers

  -- add to Registries
  mapA_ (\ investor -> submit apple do
    exerciseByKeyCmd @VoterRegistry apple AddInvestor
      with ..
    ) investors
  mapA_ (\ investor -> submit google do
    exerciseByKeyCmd @VoterRegistry google AddInvestor
      with ..
    ) investors
  mapA_ (\ investor -> submit amazon do
    exerciseByKeyCmd @VoterRegistry amazon AddInvestor
      with ..
    ) investors

  submit microsoft do
    exerciseByKeyCmd @VoterRegistry microsoft AddInvestor
      with
        investor = alice

  submit microsoft do
    exerciseByKeyCmd @VoterRegistry microsoft AddInvestor
      with
        investor = charlie

  submit fidelity do
    exerciseByKeyCmd @VoterRegistry fidelity AddInvestor
      with
        investor = dan

  -- create Proxies
  bobProxy <- submit admin do
    createCmd Proxy
      with
        admin
        proxy = alpha
        public

  faithProxy <- submit admin do
    createCmd Proxy
      with
        admin
        proxy = beta
        public

  faithProxy <- submit admin do
    createCmd Proxy
      with
        admin
        proxy = gamma
        public

  bobAppleProxy <- submit apple do
    exerciseByKeyCmd @Issuer (bony, apple) GrantProxyRights
      with
        proxy = alpha

  gammaAppleProxy <- submit apple do
    exerciseByKeyCmd @Issuer (bony, apple) GrantProxyRights
      with
        proxy = gamma

  faithMicrosoftProxy <- submit microsoft do
    exerciseByKeyCmd @Issuer (bony, microsoft) GrantProxyRights
      with
        proxy = beta

  -- issue Votes
  aliceVote <- submit apple do
    exerciseByKeyCmd @Issuer (bony, apple) IssueVote
      with
        investor = alice
        quantity = 10
        issued = now
        proxy = Some alpha

  aliceVote2 <- submit microsoft do
    exerciseByKeyCmd @Issuer (bony, microsoft) IssueVote
      with
        investor = alice
        quantity = 20
        issued = now
        proxy = Some beta

  aliceVote3 <- submit google do
    exerciseByKeyCmd @Issuer (bony, google) IssueVote
      with
        investor = alice
        quantity = 30
        issued = now
        proxy = Some beta

  charlieVote <- submit apple do
    exerciseByKeyCmd @Issuer (bony, apple) IssueVote
      with
        investor = charlie
        quantity = 5
        issued = now
        proxy = Some alpha

  charlieVote2 <- submit microsoft do
    exerciseByKeyCmd @Issuer (bony, microsoft) IssueVote
      with
        investor = charlie
        quantity = 10
        issued = now
        proxy = Some beta

  charlieVote3 <- submit google do
    exerciseByKeyCmd @Issuer (bony, google) IssueVote
      with
        investor = charlie
        quantity = 15
        issued = now
        proxy = Some beta

  danVote <- submit apple do
    exerciseByKeyCmd @Issuer (bony, apple) IssueVote
      with
        investor = dan
        quantity = 50
        issued = now
        proxy = Some gamma

  danVote2 <- submit fidelity do
    exerciseByKeyCmd @Issuer (bony, fidelity) IssueVote
      with
        investor = dan
        quantity = 200
        issued = now
        proxy = None

  -- -- Alice transfers vote to proxy Bob
  -- aliceToBobVoteTransfer <- submit alice do
  --   exerciseCmd aliceVote Transfer
  --     with
  --       newProxy = Some alpha

  -- aliceToBobVoteTransfer2 <- submit alice do
  --   exerciseCmd aliceVote2 Transfer
  --     with
  --       newProxy = Some alpha

  -- -- proxy Bob accepts Alice's vote
  -- aliceBobVote <- submit alpha do
  --   exerciseCmd bobAppleProxy AcceptVoteAsProxy
  --     with
  --       transferId = aliceToBobVoteTransfer
  -- aliceBobVote2 <- submit alpha do
  --   exerciseCmd bobAppleProxy AcceptVoteAsProxy
  --     with
  --       transferId = aliceToBobVoteTransfer2

  -- create Election 123
  let id = "123"
  let date = Date.date 2021 Date.Jul 14
  election <- submit apple do
    exerciseByKeyCmd @Issuer (bony, apple) CreateElection
      with
        id
        date
        description = "vote on CEO"

  -- create ballot for Apple shareholders
  ballots <- submit bony do
    exerciseCmd election IssueBallots

  bobFilledBallot <- submit alpha do
    exerciseByKeyCmd @Ballot (alice, apple, date, id) FillBallot
      with
        vote = True

  bobFilledBallot <- submit alpha do
    exerciseByKeyCmd @Ballot (charlie, apple, date, id) FillBallot
      with
        vote = True

  submit admin do
    exerciseByKeyCmd @Election (apple, date, id) CollectBallots

  -- create Election 102
  let id = "102"
  let date = Date.date 2021 Date.May 17
  election <- submit apple do
    exerciseByKeyCmd @Issuer (bony, apple) CreateElection
      with
        id
        date
        description = "vote on budget"

  -- create ballot for Apple shareholders
  ballots <- submit bony do
    exerciseCmd election IssueBallots

  submit alpha do
    exerciseByKeyCmd @Ballot (alice, apple, date, id) FillBallot
      with
        vote = True

  submit alpha do
    exerciseByKeyCmd @Ballot (charlie, apple, date, id) FillBallot
      with
        vote = True

  submit gamma do
    exerciseByKeyCmd @Ballot (dan, apple, date, id) FillBallot
      with
        vote = True

  submit admin do
    exerciseByKeyCmd @Election (apple, date, id) CollectBallots

  -- create Election 401
  let id = "401"
  let date = Date.date 2021 Date.May 11
  election <- submit microsoft do
    exerciseByKeyCmd @Issuer (bony, microsoft) CreateElection
      with
        id
        date
        description = "vote on budget"

  -- create ballot for microsoft shareholders
  ballots <- submit bony do
    exerciseCmd election IssueBallots

  submit beta do
    exerciseByKeyCmd @Ballot (alice, microsoft, date, id) FillBallot
      with
        vote = True

  submit beta do
    exerciseByKeyCmd @Ballot (charlie, microsoft, date, id) FillBallot
      with
        vote = True

  submit admin do
    exerciseByKeyCmd @Election (microsoft, date, id) CollectBallots

  -- create Election 431
  let id = "431"
  let date = Date.date 2021 Date.Jul 20
  election <- submit microsoft do
    exerciseByKeyCmd @Issuer (bony, microsoft) CreateElection
      with
        id
        date
        description = "vote on director"

  -- create ballot for microsoft shareholders
  ballots <- submit bony do
    exerciseCmd election IssueBallots

  submit beta do
    exerciseByKeyCmd @Ballot (alice, microsoft, date, id) FillBallot
      with
        vote = False

  submit beta do
    exerciseByKeyCmd @Ballot (charlie, microsoft, date, id) FillBallot
      with
        vote = False

  submit admin do
    exerciseByKeyCmd @Election (microsoft, date, id) CollectBallots

  return ()
