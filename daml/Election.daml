module Election where

import DA.Action (foldlA)
import DA.Optional (whenSome, fromOptional)
import DA.Set as Set

import Vote


-- unused
-- data ProxyVoter = Investor with voter: Party | Proxy with voter: Party deriving (Eq, Show)


template Election
  -- some event in time, voters will cast ballots on, either yes or no
  -- admin collects ballots, tallies, announces winner (public party?)
  with
    date: Date
    admin: Party
    issuer: Party
    id: Text
    description: Text
    csd: Party -- DTCC
    auditor: Party -- the Fed
    investors: Set Party
    votedInvestors: Set Party
    -- TODO: add proxies
    proxies: Set Party
    votedProxies: Set Party
  where
    signatory admin, issuer
    observer csd, auditor, investors, proxies
    key (issuer, date, id): (Party, Date, Text)
    maintainer key._1

    controller issuer can
      -- issue ballots 1:1 to votes per investor
      nonconsuming IssueBallots: [ContractId Ballot]
        with
          symbol: Text
        do
          forA (toList investors) (\investor -> do
            (voteId, vote) <- fetchByKey @Vote (issuer, symbol, investor)
            create Ballot
              with
                quantity = vote.quantity
                electionId = id
                electionDate = date
                proxy = vote.proxy
                ..
            )

    choice AddFilledOutBallot: ContractId Election
        with
          investor: Party
          proxy: Optional Party
      controller issuer, admin, fromOptional investor proxy
        do
          assert $ member investor investors
          whenSome proxy (\p -> assert $ member p proxies)
          create this with
            votedInvestors = insert investor votedInvestors
            votedProxies = optional votedProxies (`insert` votedProxies) proxy

    controller admin can
      CollectBallots: ContractId ElectionResult
        do
          (votesFor, votesAgainst) <- foldlA (\ (yeses, nos) investor -> do
            (cid, filledOutBallot) <- fetchByKey @FilledOutBallot (investor, issuer, date, id)
            -- archive cid -- can't archive without investor approval
            if filledOutBallot.vote
            then return (yeses + filledOutBallot.quantity, nos)
            else return (yeses, nos + filledOutBallot.quantity)
            ) (0,0) (toList votedInvestors)
          absentee <- foldlA (\ num investor -> do
            (cid, ballot) <- fetchByKey @Ballot (investor, issuer, date, id)
            return (num + ballot.quantity)
            ) 0 (toList (difference investors votedInvestors))
          create ElectionResult with ..


template Ballot
  -- give to Vote holders, quantity as same as Vote quantity
  -- specific to an Election
  -- admin issues these
  -- private to investor, proxy, and admin
  with
    admin: Party
    issuer: Party
    investor: Party
    proxy: Optional Party
    quantity: Int
    electionId: Text
    electionDate: Date
  where
    signatory admin, issuer
    key (investor, issuer, electionDate, electionId): (Party, Party, Date, Text)
    maintainer key._2

    controller fromOptional investor proxy can
      FillBallot: ContractId FilledOutBallot
        with
          vote: Bool
        do
          -- add to Election
          cid <- create FilledOutBallot with ..
          exerciseByKey @Election (issuer, electionDate, electionId) AddFilledOutBallot with ..
          return cid


template FilledOutBallot
  -- holds the ballot up/down vote
  -- replaces/archives Ballot
  with
    admin: Party
    issuer: Party
    investor: Party
    proxy: Optional Party
    quantity: Int
    electionId: Text
    electionDate: Date
    vote: Bool
  where
    signatory admin, issuer, fromOptional investor proxy
    observer investor
    key (investor, issuer, electionDate, electionId): (Party, Party, Date, Text)
    maintainer key._2


template ElectionResult
  -- captures the votes
  -- destroys/archives ballots and election after counting
  with
    admin: Party
    issuer: Party
    investors: Set Party
    proxies: Set Party
    id: Text
    date: Date
    description: Text
    votesFor: Int
    votesAgainst: Int
    absentee: Int
  where
    signatory admin, issuer -- TODO: list of investors can be signatory
    observer investors, proxies -- TODO: add proxy
