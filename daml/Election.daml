module Election where

import Vote


template Election
  -- some event in time, voters will cast ballots on, either yes or no
  -- admin collects ballots, tallies, announces winner (public party?)
  with
    date: Date
    admin: Party
    issuer: Party
    description: Text
    csd: Party -- DTCC
    auditor: Party -- the Fed
    -- TODO: update Election to store filled out ballots
    -- TODO: include list of possible voters
  where
    signatory admin, issuer
    observer csd, auditor
    -- TODO: add key

    controller issuer can
      nonconsuming IssueBallots: ContractId Ballot
        with
          symbol: Text
          investor: Party
          proxy: Optional Party
        do
          (voteId, vote) <- fetchByKey @Vote (issuer, symbol, investor)
          create Ballot
            with
              quantity = vote.quantity
              election = self
              ..

    -- controller admin can
    --   CollectBallots: ContractId ElectionResult
    --     do


template Ballot
  -- give to Vote holders, quantity as same as Vote quantity
  -- specific to an Election
  -- admin issues these
  -- private to investor, proxy, and admin
  with
    admin: Party
    issuer: Party
    investor: Party
    proxy: Optional Party
    quantity: Int
    election: ContractId Election -- TODO: switch to key
    csd: Party -- DTCC
    auditor: Party -- the Fed
  where
    signatory admin, issuer
    observer csd, auditor

    controller investor can
      FillBallot: ContractId FilledOutBallot
        with
          vote: Bool
        do
          create FilledOutBallot with ..
          -- add to Election


template FilledOutBallot
  -- holds the ballot up/down vote
  -- replaces/archives Ballot
  with
    admin: Party
    issuer: Party
    investor: Party
    csd: Party -- DTCC
    auditor: Party -- the Fed
    proxy: Optional Party
    quantity: Int
    election: ContractId Election
    vote: Bool
  where
    signatory admin, investor, proxy
    observer csd, auditor
    -- TODO add key


template ElectionResult
  -- captures the votes
  -- destroys/archives ballots and election after counting
  with
    admin: Party
    issuer: Party
    votesFor: Int
    votesAgainst: Int
  where
    signatory admin, issuer -- list of investors can be signatory
    -- add observers (at least investors/proxies)
