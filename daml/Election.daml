module Election where

import Vote


template Election
  -- some event in time, voters will cast ballots on, either yes or no
  -- admin collects ballots, tallies, announces winner (public party?)
  with
    date: Date
    admin: Party
    issuer: Party
    description: Text
  where
    signatory admin, issuer

    controller issuer can
      nonconsuming IssueBallots: ContractId Ballot
        with
          investor: Party
          proxy: Optional Party
        do
          (voteId, vote) <- fetchByKey @Vote (issuer, investor)
          create Ballot
            with
              quantity = vote.quantity
              election = self
              ..
    
    -- controller admin can
    --   CollectBallots: ContractId ElectionResult
    --     do



template Ballot
  -- give to Vote holders, quantity as same as Vote quantity
  -- specific to an Election
  -- admin issues these
  -- private to investor, proxy, and admin
  with
    admin: Party
    issuer: Party
    investor: Party
    proxy: Optional Party
    quantity: Int
    election: ContractId Election
  where
    signatory admin, issuer

    controller investor can
      FillBallot: ContractId FilledOutBallot
        with
          vote: Bool
        do
          create FilledOutBallot with ..


template FilledOutBallot
  -- holds the ballot up/down vote
  -- replaces/archives Ballot
  with
    admin: Party
    issuer: Party
    investor: Party
    proxy: Optional Party
    quantity: Int
    election: ContractId Election
    vote: Bool
  where
    signatory admin, investor, proxy


template ElectionResult
  -- captures the votes
  -- destroys/archives ballots and election after counting
  with
    admin: Party
    issuer: Party
    votesFor: Int
    votesAgainst: Int
  where
    signatory admin, issuer
